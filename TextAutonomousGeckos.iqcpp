{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT3, 1, true);\nmotor RightDriveSmart = motor(PORT4, 1, false);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\nmotor ArmMotorA = motor(PORT1, false);\nmotor ArmMotorB = motor(PORT6, true);\nmotor_group Arm = motor_group(ArmMotorA, ArmMotorB);\n\nmotor Intake = motor(PORT2, false);\ntouchled TouchLED = touchled(PORT5);\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable, intake, Auton;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Auton = 3.0;\n  intake = 0.0;\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) { task::sleep(50); }\n  Drivetrain.setDriveVelocity(60.0, percent);\n  Drivetrain.setTurnVelocity(40.0, percent);\n  Arm.setVelocity(65.0, percent);\n  Intake.setVelocity(80.0, percent);\n  TouchLED.setColor(blue);\n  return 0;\n}\n\n// \"when TouchLED pressed\" hat block\nvoid onevent_TouchLED_pressed_0() {\n  if (Auton == 0.0) {\n    Auton = 1.0;\n    TouchLED.setColor(green);\n    Intake.spin(forward);\n    Drivetrain.setDriveVelocity(80.0, percent);\n    Drivetrain.driveFor(forward, 18.0, inches, true);\n    Drivetrain.drive(reverse);\n    wait(0.8, seconds);\n    Drivetrain.setTurnVelocity(40.0, percent);\n    Drivetrain.turnFor(right, 40.0, degrees, true);\n    Drivetrain.driveFor(forward, 9.0, inches, true);\n    wait(0.3, seconds);\n    Drivetrain.driveFor(reverse, 4.0, inches, true);\n    Drivetrain.turnFor(right, 80.0, degrees, true);\n    Arm.spin(forward);\n    wait(1.0, seconds);\n    Arm.setStopping(hold);\n    Drivetrain.driveFor(forward, 13.0, inches, true);\n    wait(0.3, seconds);\n    Intake.spin(reverse);\n    wait(1.5, seconds);\n    Intake.stop();\n    wait(1.0, seconds);\n    Drivetrain.driveFor(reverse, 6.0, inches, true);\n    Arm.spin(reverse);\n    wait(1.0, seconds);\n    Arm.setStopping(hold);\n    TouchLED.setColor(red);\n    wait(1.0, seconds);\n  } else if (Auton == 1.0) {\n    Auton = 2.0;\n    TouchLED.setColor(green);\n    Intake.spin(forward);\n    Drivetrain.setDriveVelocity(80.0, percent);\n    Drivetrain.driveFor(forward, 18.0, inches, true);\n    Drivetrain.drive(reverse);\n    wait(0.8, seconds);\n    Drivetrain.setTurnVelocity(50.0, percent);\n    Drivetrain.turnFor(left, 40.0, degrees, true);\n    Drivetrain.drive(forward);\n    wait(0.8, seconds);\n    Drivetrain.driveFor(reverse, 6.0, inches, true);\n    Arm.spin(forward);\n    wait(1.0, seconds);\n    Arm.setStopping(hold);\n    Drivetrain.turnFor(left, 130.0, degrees, true);\n    Drivetrain.drive(forward);\n    wait(1.0, seconds);\n    Intake.spin(reverse);\n    wait(1.5, seconds);\n    Intake.stop();\n    wait(1.0, seconds);\n    Drivetrain.driveFor(reverse, 6.0, inches, true);\n    Arm.spin(reverse);\n    wait(1.0, seconds);\n    Arm.setStopping(hold);\n    TouchLED.setColor(red);\n    wait(1.0, seconds);\n  } else if (Auton == 2.0) {\n    // start auton part 3\n    Auton = 3.0;\n    Drivetrain.setDriveVelocity(80.0, percent);\n    Drivetrain.setTurnVelocity(45.0, percent);\n    Intake.setVelocity(100.0, percent);\n    Arm.spinFor(forward, 450.0, degrees, false);\n    Drivetrain.drive(forward);\n    wait(4.1, seconds);\n    Drivetrain.driveFor(reverse, 2.0, mm, true);\n    Drivetrain.turnFor(left, 50.0, degrees, true);\n    Intake.spin(forward);\n    Drivetrain.driveFor(reverse, 5.0, inches, true);\n    Arm.spinFor(reverse, 440.0, degrees, true);\n    Drivetrain.drive(forward);\n    wait(2.0, seconds);\n    Drivetrain.turnFor(left, 10.0, degrees, true);\n    Drivetrain.drive(forward);\n    wait(0.8, seconds);\n    Drivetrain.driveFor(reverse, 4.0, inches, true);\n    Drivetrain.turn(left);\n    wait(0.5, seconds);\n    Drivetrain.driveFor(forward, 8.0, inches, true);\n    Intake.stop();\n    Arm.spinFor(forward, 450.0, degrees, false);\n    Drivetrain.turnFor(right, 80.0, degrees, true);\n    Drivetrain.drive(forward);\n    wait(1.0, seconds);\n    Intake.spin(reverse);\n  } else if (Auton == 3.0) {\n    Drivetrain.drive(forward);\n    wait(3.0, seconds);\n    Drivetrain.turnFor(right, 50.0, degrees, true);\n    Drivetrain.drive(forward);\n  } else {\n  }\n}\n\n\nint main() {\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\n  // register event handlers\n  TouchLED.pressed(onevent_TouchLED_pressed_0);\n\n  wait(15, msec);\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[3,4,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"rev","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[1,6],"name":"Arm","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[2],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[5],"name":"TouchLED","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}